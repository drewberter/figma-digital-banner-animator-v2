import { useRef, useEffect } from 'react';
import { mockFrames, mockLayers } from '../mock/animationData';
import { AnimationType, EasingType } from '../types/animation';

interface PreviewCanvasProps {
  selectedFrameId?: string;
  currentTime?: number;
}

const PreviewCanvas = ({ 
  selectedFrameId = 'frame-1',
  currentTime = 0
}: PreviewCanvasProps) => {
  const canvasRef = useRef<HTMLDivElement>(null);
  const headlineRef = useRef<HTMLHeadingElement>(null);
  const subtitleRef = useRef<HTMLParagraphElement>(null);
  const buttonRef = useRef<HTMLButtonElement>(null);
  const logoRef = useRef<HTMLDivElement>(null);
  
  // Find the selected frame or default to the first one
  const selectedFrame = mockFrames.find(frame => frame.id === selectedFrameId) || mockFrames[0];
  
  // Set up canvas dimensions based on selected frame
  const frameWidth = selectedFrame?.width || 300;
  const frameHeight = selectedFrame?.height || 250;
  
  // Apply easing function to progress
  const applyEasing = (progress: number, easingType: EasingType): number => {
    switch (easingType) {
      case EasingType.Linear:
        return progress;
      case EasingType.EaseIn:
        return progress * progress;
      case EasingType.EaseOut:
        return progress * (2 - progress);
      case EasingType.EaseInOut:
        return progress < 0.5 
          ? 2 * progress * progress 
          : -1 + (4 - 2 * progress) * progress;
      case EasingType.Bounce:
        if (progress < 1/2.75) {
          return 7.5625 * progress * progress;
        } else if (progress < 2/2.75) {
          const adjusted = progress - 1.5/2.75;
          return 7.5625 * adjusted * adjusted + 0.75;
        } else if (progress < 2.5/2.75) {
          const adjusted = progress - 2.25/2.75;
          return 7.5625 * adjusted * adjusted + 0.9375;
        } else {
          const adjusted = progress - 2.625/2.75;
          return 7.5625 * adjusted * adjusted + 0.984375;
        }
      default:
        return progress;
    }
  };

  // Get the animation data for the current frame
  const frameLayers = mockLayers[selectedFrameId] || [];
  
  // Find animation layers that correspond to our preview elements
  const backgroundLayer = frameLayers.find(layer => layer.name === 'Background');
  const headlineLayer = frameLayers.find(layer => layer.name === 'Headline' || layer.name === 'Title');
  const subtitleLayer = frameLayers.find(layer => layer.name === 'Subhead' || layer.name === 'Tagline' || layer.name === 'Description');
  const buttonLayer = frameLayers.find(layer => layer.name === 'CTA Button');
  const logoLayer = frameLayers.find(layer => layer.name === 'Logo');
  
  // Helper function to find and apply animations for a layer
  const processAnimations = (
    element: HTMLElement | null,
    layer: typeof headlineLayer,
    defaultOpacity = '0',
    defaultTransform = ''
  ) => {
    if (!element || !layer) return;
    
    // Find the active animation if any
    let activeAnimation = null;
    let finalAnimation = null;
    let animationApplied = false;
    
    // Sort animations by start time to ensure they're processed in order
    const sortedAnimations = [...layer.animations].sort((a, b) => {
      const startA = a.startTime || 0;
      const startB = b.startTime || 0;
      return startA - startB;
    });
    
    // Reset styles to default initially
    element.style.opacity = defaultOpacity;
    if (defaultTransform) element.style.transform = defaultTransform;
    
    // Find the active animation
    for (const animation of sortedAnimations) {
      const startTime = animation.startTime || 0;
      const endTime = startTime + animation.duration;
      
      // Active animation takes precedence
      if (currentTime >= startTime && currentTime <= endTime) {
        activeAnimation = animation;
        break;
      }
      // Keep track of the latest animation we've passed
      else if (currentTime > endTime) {
        finalAnimation = animation;
      }
    }
    
    // Apply active animation if found
    if (activeAnimation) {
      const startTime = activeAnimation.startTime || 0;
      const progress = (currentTime - startTime) / activeAnimation.duration;
      const easedProgress = applyEasing(progress, activeAnimation.easing);
      
      // Apply different animation types
      if (activeAnimation.type === AnimationType.Fade) {
        element.style.opacity = `${easedProgress}`;
        animationApplied = true;
      } else if (activeAnimation.type === AnimationType.Scale) {
        const scale = 0.8 + (easedProgress * 0.4); // Scale from 0.8 to 1.2
        element.style.transform = `scale(${scale})`;
        element.style.opacity = '1';
        animationApplied = true;
      } else if (activeAnimation.type === AnimationType.Slide) {
        let offset = 20 - (easedProgress * 20); // Start 20px offset, end at 0
        let direction = activeAnimation.direction || 'right';
        
        if (direction === 'right') {
          element.style.transform = `translateX(${-offset}px)`;
        } else if (direction === 'left') {
          element.style.transform = `translateX(${offset}px)`;
        } else if (direction === 'top') {
          element.style.transform = `translateY(${offset}px)`;
        } else if (direction === 'bottom') {
          element.style.transform = `translateY(${-offset}px)`;
        }
        
        element.style.opacity = '1';
        animationApplied = true;
      } else if (activeAnimation.type === AnimationType.Rotate) {
        const rotation = easedProgress * (activeAnimation.rotation || 360);
        element.style.transform = `rotate(${rotation}deg)`;
        element.style.opacity = '1';
        animationApplied = true;
      } else if (activeAnimation.type === AnimationType.Bounce) {
        // Simple bounce effect
        const bounceScale = 1 + (Math.sin(easedProgress * Math.PI * 2) * 0.1);
        element.style.transform = `scale(${bounceScale})`;
        element.style.opacity = '1';
        animationApplied = true;
      } else if (activeAnimation.type === AnimationType.Pulse) {
        // Simple pulse effect - opacity pulsing
        const pulseOpacity = 0.7 + (Math.sin(easedProgress * Math.PI * 2) * 0.3);
        element.style.opacity = `${pulseOpacity}`;
        animationApplied = true;
      }
    } 
    // If no active animation but we've passed one, show the final state
    else if (finalAnimation) {
      if (finalAnimation.type === AnimationType.Fade) {
        element.style.opacity = '1';
      } else if (finalAnimation.type === AnimationType.Scale) {
        element.style.transform = 'scale(1.2)';
        element.style.opacity = '1';
      } else if (finalAnimation.type === AnimationType.Slide) {
        element.style.transform = 'translateY(0)';
        element.style.opacity = '1';
      } else if (finalAnimation.type === AnimationType.Rotate) {
        element.style.transform = `rotate(${finalAnimation.rotation || 360}deg)`;
        element.style.opacity = '1';
      } else if (finalAnimation.type === AnimationType.Bounce || 
                finalAnimation.type === AnimationType.Pulse) {
        element.style.transform = 'scale(1)';
        element.style.opacity = '1';
      }
      animationApplied = true;
    }
    
    // If no animation applied, keep element in default state
    if (!animationApplied) {
      element.style.opacity = defaultOpacity;
      if (defaultTransform) element.style.transform = defaultTransform;
    }
  };
  
  // Update animations when currentTime changes
  useEffect(() => {
    // Process animations for each element
    processAnimations(headlineRef.current, headlineLayer, '0', 'translateY(0)');
    processAnimations(subtitleRef.current, subtitleLayer, '0', 'translateY(0)');
    processAnimations(buttonRef.current, buttonLayer, '0', 'scale(0.8)');
    processAnimations(logoRef.current, logoLayer, '0', 'rotate(0deg)');
  }, [currentTime, selectedFrameId]);

  return (
    <div className="h-full bg-neutral-900 flex items-center justify-center overflow-hidden">
      <div className="flex flex-col items-center">
        <div className="mb-4 text-sm text-neutral-500">
          Time: {currentTime.toFixed(1)}s
        </div>
        
        {/* Canvas preview area */}
        <div
          ref={canvasRef}
          className="bg-white rounded shadow-lg overflow-hidden"
          style={{
            width: `${frameWidth}px`,
            height: `${frameHeight}px`
          }}
        >
          {/* Demo content showing a typical banner structure */}
          <div className="relative w-full h-full bg-gradient-to-br from-blue-500 to-indigo-700">
            {/* Headline text */}
            <div className="absolute top-10 left-0 right-0 text-center">
              <h2 ref={headlineRef} className="text-white text-2xl font-bold mb-2 transition-all duration-300">
                Amazing Offer
              </h2>
              <p ref={subtitleRef} className="text-white text-sm transition-all duration-300">
                Limited time only!
              </p>
            </div>
            
            {/* CTA Button */}
            <div className="absolute bottom-12 left-0 right-0 flex justify-center">
              <button 
                ref={buttonRef}
                className="bg-yellow-500 hover:bg-yellow-600 text-black px-4 py-2 rounded font-medium transition-all duration-300"
              >
                Shop Now
              </button>
            </div>
            
            {/* Logo */}
            <div className="absolute bottom-2 left-0 right-0 flex justify-center">
              <div ref={logoRef} className="text-white text-xs opacity-75 transition-all duration-300">
                LOGO
              </div>
            </div>
          </div>
        </div>
        
        <div className="mt-4 text-xs text-neutral-400">
          {selectedFrame.width} Ã— {selectedFrame.height}
        </div>
      </div>
    </div>
  );
};

export default PreviewCanvas;